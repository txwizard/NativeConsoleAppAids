; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TTL	F:\Source_Code\Visual_Studio\Projects\NATIVE\DLL\NativeConsoleAppAids\NativeConssoleAppAids\ProgramIDFromArgVW.c
	THUMB
	.drectve
	DCB	"-defaultlib:MSVCRTD "
	DCB	"-defaultlib:OLDNAMES "

	.msvcjmc
|__2CC6E67D_corecrt_stdio_config@h| DCB 0x1
|__05476D76_corecrt_wstdio@h| DCB 0x1
|__A452D4A0_stdio@h| DCB 0x1
|__7B7A869E_ctype@h| DCB 0x1
|__457DD326_basetsd@h| DCB 0x1
|__4384A2D9_corecrt_memcpy_s@h| DCB 0x1
|__4E51A221_corecrt_wstring@h| DCB 0x1
|__2140C079_string@h| DCB 0x1
|__29C54D54_arm_neon@h| DCB 0x1
|__1887E595_winnt@h| DCB 0x1
|__9FC7C64B_processthreadsapi@h| DCB 0x1
|__FA470AEC_memoryapi@h| DCB 0x1
|__F37DAFF1_winerror@h| DCB 0x1
|__7A450CCC_winbase@h| DCB 0x1
|__86261D59_stralign@h| DCB 0x1
|__41381B41_corecrt_wconio@h| DCB 0x1
|__C0802A2B_corecrt_wtime@h| DCB 0x1
|__A40A425D_stat@h| DCB 0x1
|__5A74375D_wchar@h| DCB 0x1
|__6B9C2DC0_tchar@h| DCB 0x1
|__5B3CD072_programidfromargvw@c| DCB 0x1
	.data
|chrArg0IsNull| DCB "E", 0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0
	DCB	" ", 0x0, "T", 0x0, "h", 0x0, "e", 0x0, " ", 0x0, "f", 0x0
	DCB	"i", 0x0, "r", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "s", 0x0
	DCB	"t", 0x0, "r", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0
	DCB	"i", 0x0, "n", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e", 0x0
	DCB	" ", 0x0, "a", 0x0, "r", 0x0, "g", 0x0, "u", 0x0, "m", 0x0
	DCB	"e", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "l", 0x0, "i", 0x0
	DCB	"s", 0x0, "t", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "s", 0x0
	DCB	"s", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "i", 0x0, "n", 0x0
	DCB	"t", 0x0, "o", 0x0, " ", 0x0, "r", 0x0, "o", 0x0, "u", 0x0
	DCB	"t", 0x0, "i", 0x0, "n", 0x0, "e", 0x0, " ", 0x0, "P", 0x0
	DCB	"r", 0x0, "o", 0x0, "g", 0x0, "r", 0x0, "a", 0x0, "m", 0x0
	DCB	"I", 0x0, "D", 0x0, "F", 0x0, "r", 0x0, "o", 0x0, "m", 0x0
	DCB	"A", 0x0, "r", 0x0, "g", 0x0, "V", 0x0, " ", 0x0, "i", 0x0
	DCB	"s", 0x0, " ", 0x0, "a", 0x0, " ", 0x0, "n", 0x0, "u", 0x0
	DCB	"l", 0x0, "l", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "f", 0x0
	DCB	"e", 0x0, "r", 0x0, "e", 0x0, "n", 0x0, "c", 0x0, "e", 0x0
	DCB	".", 0x0, 0xa, 0x0, 0x0, 0x0
	%	6
|chrArg0IsBlank| DCB "E", 0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":"
	DCB	0x0, " ", 0x0, "T", 0x0, "h", 0x0, "e", 0x0, " ", 0x0, "f"
	DCB	0x0, "i", 0x0, "r", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "s"
	DCB	0x0, "t", 0x0, "r", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e"
	DCB	0x0, " ", 0x0, "a", 0x0, "r", 0x0, "g", 0x0, "u", 0x0, "m"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "l", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "s"
	DCB	0x0, "s", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "r", 0x0, "o", 0x0, "u"
	DCB	0x0, "t", 0x0, "i", 0x0, "n", 0x0, "e", 0x0, " ", 0x0, "P"
	DCB	0x0, "r", 0x0, "o", 0x0, "g", 0x0, "r", 0x0, "a", 0x0, "m"
	DCB	0x0, "I", 0x0, "D", 0x0, "F", 0x0, "r", 0x0, "o", 0x0, "m"
	DCB	0x0, "A", 0x0, "r", 0x0, "g", 0x0, "V", 0x0, " ", 0x0, "i"
	DCB	0x0, "s", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e", 0x0, " "
	DCB	0x0, "e", 0x0, "m", 0x0, "p", 0x0, "t", 0x0, "y", 0x0, " "
	DCB	0x0, "s", 0x0, "t", 0x0, "r", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, ".", 0x0, 0xa, 0x0, 0x0, 0x0
	%	2
|chrPathDlm| DCB "\\", 0x0, 0x0, 0x0
	EXPORT	|ProgramIDFromArgVW|
	EXPORT	|__JustMyCode_Default|
	IMPORT	|wcsstr|
	IMPORT	|__imp_HeapAlloc|
	IMPORT	|__CheckForDebuggerJustMyCode|
	IMPORT	|memcpy|
	IMPORT	|m_hProcHeap|
;	COMDAT .pdata
.pdata	SEGMENT
|$pdata1$ProgramIDFromArgVW| DCD imagerel |ProgramIDFromArgVW|
	DCD	imagerel |$unwind2$ProgramIDFromArgVW|
;	COMDAT .xdata
.xdata	SEGMENT
|$unwind2$ProgramIDFromArgVW| DCD 0x332000c3
	DCD	0xa8fb10
	DCD	0x8810ff02
	DCD	0xff03ef00
;	COMDAT .pdata
.pdata	SEGMENT
|$pdata1$__JustMyCode_Default| DCD imagerel |__JustMyCode_Default|
	DCD	imagerel |$unwind2$__JustMyCode_Default|
;	COMDAT .xdata
.xdata	SEGMENT
|$unwind2$__JustMyCode_Default| DCD 0x10a00005
	DCD	0xff00a8fb
	.data
|chrExtnDlm| DCB ".", 0x0, 0x0, 0x0
|lpchrArg0IsNull| DCD |chrArg0IsNull|
|lpchrArg0IsBlank| DCD |chrArg0IsBlank|
|lpchrPathDlm| DCD |chrPathDlm|
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
.text$mn	SEGMENT

|__JustMyCode_Default| PROC
	push        {r11,lr}
	mov         r11,sp
|$M2|
|$M1|
	pop         {r11,pc}
|$M3|

	ENDP  ; |__JustMyCode_Default|

; Function compile flags: /Odtp
; File f:\source_code\visual_studio\projects\native\dll\nativeconsoleappaids\nativeconssoleappaids\programidfromargvw.c
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\tchar.h
; File f:\source_code\visual_studio\projects\native\dll\nativeconsoleappaids\nativeconssoleappaids\programidfromargvw.c
;	COMDAT ProgramIDFromArgVW
.text$mn	SEGMENT

|ProgramIDFromArgVW| PROC

; 145  : {	// Unlike C++, straight C needs everything defined before any executable code, apart from initializers.

	push        {r0,r1}
	push        {r11,lr}
	mov         r11,sp
	sub         sp,sp,#0x40
|$M42|
	ldr         r0,|$LN39@ProgramIDF|		; =|__5B3CD072_programidfromargvw@c|
	bl          __CheckForDebuggerJustMyCode

; 146  : 	TCHAR *	rlpBaseNameByItself					= NULL ;

	movs        r3,#0
	str         r3,[sp,#0x30]

; 147  : 
; 148  :     BOOL	fBaseNameIsolated					= FALSE ;

	movs        r3,#0
	str         r3,[sp,#0x1C]

; 149  :     BOOL	fIsFirstDoLoop						= TRUE ;

	movs        r3,#1
	str         r3,[sp,#0x14]

; 150  : 
; 151  :     size_t	intPgmIdLengthbBytes				= -1 ;

	mvn         r3,#0
	str         r3,[sp,#0x24]

; 152  : 	size_t	intPgmPtrLength						= -1 ;

	mvn         r3,#0
	str         r3,[sp,#0xC]

; 153  : 
; 154  : 	TCHAR *	lpLastCharacterInString				= NULL ;

	movs        r3,#0
	str         r3,[sp,#0x20]

; 155  : 	TCHAR *	lpLastDelimiterScan					= NULL ;

	movs        r3,#0
	str         r3,[sp,#4]

; 156  : 	TCHAR *	lpLastExtnDelimiter					= NULL ;

	movs        r3,#0
	str         r3,[sp,#8]

; 157  : 	TCHAR *	lpLastPathDelimiter					= NULL ;

	movs        r3,#0
	str         r3,[sp]

; 158  : 
; 159  :     if ( plpszArg0 )

	ldr         r3,[sp,#0x48]
	cmp         r3,#0
	beq         |$LN8@ProgramIDF|

; 160  :     {
; 161  :         if ( ( intPgmPtrLength = intPgmPtrLength = _tcslen ( plpszArg0 ) ) )

	ldr         r3,[sp,#0x48]
	str         r3,[sp,#0x10]
|$LN24@ProgramIDF|
	ldr         r3,[sp,#0x10]
	ldrsh       r3,[r3]
	cmp         r3,#0
	beq         |$LN23@ProgramIDF|
	ldr         r3,[sp,#0x10]
	adds        r3,r3,#2
	str         r3,[sp,#0x10]
	b           |$LN24@ProgramIDF|
|$LN23@ProgramIDF|
	ldr         r2,[sp,#0x10]
	ldr         r3,[sp,#0x48]
	subs        r3,r2,r3
	asrs        r3,r3,#1
	str         r3,[sp,#0x34]
	ldr         r3,[sp,#0x34]
	str         r3,[sp,#0xC]
	ldr         r3,[sp,#0xC]
	str         r3,[sp,#0xC]
	ldr         r3,[sp,#0xC]
	cmp         r3,#0
	beq         |$LN10@ProgramIDF|

; 162  :         {
; 163  :             lpLastDelimiterScan					= ( TCHAR * ) plpszArg0 ;

	ldr         r3,[sp,#0x48]
	str         r3,[sp,#4]

; 164  :             lpLastPathDelimiter					= ( TCHAR * ) plpszArg0 ;

	ldr         r3,[sp,#0x48]
	str         r3,[sp]
|$LN4@ProgramIDF|

; 165  : 
; 166  :             do  // while ( lpLastDelimiterScan ) ;
; 167  :             {
; 168  :                 lpLastDelimiterScan				= _tcsstr ( lpLastDelimiterScan ,

	ldr         r3,|$LN38@ProgramIDF|		; =|lpchrPathDlm|
	ldr         r1,[r3]
	ldr         r0,[sp,#4]
	bl          wcsstr
	str         r0,[sp,#4]

; 169  :                                                             lpchrPathDlm ) ;
; 170  : 
; 171  :                 if ( lpLastDelimiterScan )

	ldr         r3,[sp,#4]
	cmp         r3,#0
	beq         |$LN12@ProgramIDF|

; 172  :                 {
; 173  :                     if ( fIsFirstDoLoop )

	ldr         r3,[sp,#0x14]
	cmp         r3,#0
	beq         |$LN14@ProgramIDF|

; 174  :                     {
; 175  :                         fIsFirstDoLoop			= FALSE ;

	movs        r3,#0
	str         r3,[sp,#0x14]
|$LN14@ProgramIDF|

; 176  :                     }	// TRUE (degenerate case, where the program name is unqualified) block, if ( fIsFirstDoLoop )
; 177  : 
; 178  :                     lpLastPathDelimiter			= lpLastDelimiterScan ;

	ldr         r3,[sp,#4]
	str         r3,[sp]

; 179  :                     lpLastDelimiterScan++ ;

	ldr         r3,[sp,#4]
	adds        r3,r3,#2
	str         r3,[sp,#4]

; 180  :                 }	// TRUE block, if ( lpLastDelimiterScan )

	b           |$LN13@ProgramIDF|
|$LN12@ProgramIDF|

; 181  :                 else
; 182  :                 {
; 183  :                     if ( fIsFirstDoLoop )

	ldr         r3,[sp,#0x14]
	cmp         r3,#0
	beq         |$LN15@ProgramIDF|

; 184  :                     {
; 185  :                         fIsFirstDoLoop			= FALSE ;

	movs        r3,#0
	str         r3,[sp,#0x14]

; 186  :                     }	// TRUE (degenerate case, where the program name is unqualified) block, if ( fIsFirstDoLoop )

	b           |$LN16@ProgramIDF|
|$LN15@ProgramIDF|

; 187  :                     else
; 188  :                     {
; 189  :                         lpLastPathDelimiter++ ;

	ldr         r3,[sp]
	adds        r3,r3,#2
	str         r3,[sp]
|$LN16@ProgramIDF|
|$LN13@ProgramIDF|

; 190  :                     }	// FALSE (standard case, where the program name is at least partially qualified) block, if ( fIsFirstDoLoop )
; 191  :                 }	// FALSE block, if ( lpLastDelimiterScan )
; 192  :             } while ( lpLastDelimiterScan ) ;

	ldr         r3,[sp,#4]
	cmp         r3,#0
	bne         |$LN4@ProgramIDF|

; 193  : 
; 194  :             //	----------------------------------------------------------------
; 195  :             //	Sanity check the string pointer. Find the extension delimiter,
; 196  :             //	unless it is NULL.
; 197  :             //	----------------------------------------------------------------
; 198  : 
; 199  :             if ( lpLastPathDelimiter )

	ldr         r3,[sp]
	cmp         r3,#0
	beq         |$LN17@ProgramIDF|

; 200  :             {
; 201  : 				#pragma warning ( suppress : 4047 )
; 202  : 				lpLastCharacterInString			= ( DWORD_PTR ) ( plpszArg0 + TcharsToBytesP6C ( ( OrdinalToArrayIndexP6C ( intPgmPtrLength ) ) ) );

	ldr         r3,[sp,#0xC]
	add         r2,r3,#0xFFFFFFFF
	movs        r3,#2
	mul         r2,r2,r3
	movs        r3,#2
	mul         r2,r2,r3
	ldr         r3,[sp,#0x48]
	add         r3,r3,r2
	str         r3,[sp,#0x20]

; 203  :                 lpLastExtnDelimiter				= lpLastCharacterInString;

	ldr         r3,[sp,#0x20]
	str         r3,[sp,#8]
|$LN7@ProgramIDF|

; 204  : 
; 205  :                 do
; 206  :                 {
; 207  :                     if ( ( char ) lpLastExtnDelimiter [ ARRAY_FIRST_ELEMENT_P6C ] == chrExtnDlm [ ARRAY_FIRST_ELEMENT_P6C ] )

	ldr         r3,[sp,#8]
	ldrh        r3,[r3]
	sxtb        r2,r3
	ldr         r3,|$LN37@ProgramIDF|		; =|chrExtnDlm|
	ldrh        r3,[r3]
	cmp         r2,r3
	bne         |$LN19@ProgramIDF|

; 208  :                     {	// Found extension delimiter.
; 209  :                         fBaseNameIsolated		= TRUE;

	movs        r3,#1
	str         r3,[sp,#0x1C]

; 210  :                     }	// TRUE (Extension delimiter found.) block, if ( ( char ) lpLastExtnDelimiter [ ARRAY_FIRST_ELEMENT_P6C ] == chrExtnDlm [ ARRAY_FIRST_ELEMENT_P6C ] )

	b           |$LN20@ProgramIDF|
|$LN19@ProgramIDF|
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\tchar.h

; 726  : _Check_return_ __inline wchar_t * __CRTDECL _wcsdec(_In_z_ const wchar_t * _Cpc1, _In_z_ const wchar_t * _Cpc2) { return (wchar_t *)((_Cpc1)>=(_Cpc2) ? NULL : ((_Cpc2)-1)); }

	ldr         r2,[sp,#0x48]
	ldr         r3,[sp,#8]
	cmp         r2,r3
	bcc         |$LN29@ProgramIDF|
	movs        r3,#0
	str         r3,[sp,#0x28]
	b           |$LN30@ProgramIDF|
|$LN29@ProgramIDF|
	ldr         r3,[sp,#8]
	subs        r3,r3,#2
	str         r3,[sp,#0x28]
|$LN30@ProgramIDF|
; File f:\source_code\visual_studio\projects\native\dll\nativeconsoleappaids\nativeconssoleappaids\programidfromargvw.c

; 213  :                         lpLastExtnDelimiter		= _tcsdec ( plpszArg0 ,

	ldr         r3,[sp,#0x28]
	str         r3,[sp,#8]

; 214  :                                                             lpLastExtnDelimiter ) ;
; 215  : 
; 216  :                         if ( ( DWORD_PTR ) lpLastExtnDelimiter == ( DWORD_PTR ) lpLastPathDelimiter )

	ldr         r2,[sp,#8]
	ldr         r3,[sp]
	cmp         r2,r3
	bne         |$LN21@ProgramIDF|

; 217  :                         {	// Reached the beginning of the base name.
; 218  :                             fBaseNameIsolated	= TRUE;

	movs        r3,#1
	str         r3,[sp,#0x1C]
|$LN21@ProgramIDF|
|$LN20@ProgramIDF|

; 219  :                         }	// if ( ( DWORD_PTR ) lpLastExtnDelimiter == ( DWORD_PTR ) lpLastPathDelimiter )
; 220  :                     }	// TRUE (Extension delimiter not yet found.) block, if ( ( char ) lpLastExtnDelimiter [ ARRAY_FIRST_ELEMENT_P6C ] == chrExtnDlm [ ARRAY_FIRST_ELEMENT_P6C ] )
; 221  :                 }
; 222  :                 while ( !fBaseNameIsolated ) ;

	ldr         r3,[sp,#0x1C]
	cmp         r3,#0
	beq         |$LN7@ProgramIDF|

; 223  : 
; 224  : 				//	------------------------------------------------------------
; 225  : 				//	Though I almost always save computed values for reuse, since
; 226  : 				//	the compiler optimizes away the multiplcation operation, it
; 227  : 				//	is not worth the extra storage to compute and store the
; 228  : 				//	product.
; 229  : 				//	------------------------------------------------------------
; 230  : 
; 231  :                 intPgmIdLengthbBytes			=    ( ( DWORD_PTR ) lpLastExtnDelimiter     == ( DWORD_PTR ) lpLastPathDelimiter )

	ldr         r2,[sp,#8]
	ldr         r3,[sp]
	cmp         r2,r3
	bne         |$LN25@ProgramIDF|
	ldr         r2,[sp,#0x20]
	ldr         r3,[sp]
	subs        r3,r2,r3
	str         r3,[sp,#0x2C]
	b           |$LN26@ProgramIDF|
|$LN25@ProgramIDF|
	ldr         r2,[sp,#8]
	ldr         r3,[sp]
	subs        r3,r2,r3
	str         r3,[sp,#0x2C]
|$LN26@ProgramIDF|
	ldr         r3,[sp,#0x2C]
	str         r3,[sp,#0x24]

; 232  :                                                    ? ( ( DWORD_PTR ) lpLastCharacterInString -  ( DWORD_PTR ) lpLastPathDelimiter )
; 233  :                                                    : ( ( DWORD_PTR ) lpLastExtnDelimiter     -  ( DWORD_PTR ) lpLastPathDelimiter ) ;
; 234  : 
; 235  : 				//	------------------------------------------------------------
; 236  : 				//	Since memcpy returns its destination, we may as well return
; 237  : 				//	through it, which requires its return value (void *) to be
; 238  : 				//	cast to our return type, LPTSTR.
; 239  : 				//	------------------------------------------------------------
; 240  : 
; 241  : 				rlpBaseNameByItself				= AllocCString_WW ( intPgmIdLengthbBytes );

	ldr         r3,[sp,#0x24]
	adds        r2,r3,#1
	movs        r3,#2
	mul         r2,r2,r3
	movs        r1,#8
	ldr         r3,|$LN36@ProgramIDF|		; =|m_hProcHeap|
	ldr         r0,[r3]
	ldr         r3,|$LN35@ProgramIDF|		; =|__imp_HeapAlloc|
	ldr         r3,[r3]
	blx         r3
	str         r0,[sp,#0x30]

; 242  :                 return ( LPTSTR ) memcpy ( rlpBaseNameByItself ,

	ldr         r2,[sp,#0x24]
	ldr         r1,[sp]
	ldr         r0,[sp,#0x30]
	bl          memcpy
	str         r0,[sp,#0x38]
	ldr         r3,[sp,#0x38]
	str         r3,[sp,#0x18]
	b           |$LN1@ProgramIDF|

; 243  :                                            lpLastPathDelimiter ,
; 244  :                                            intPgmIdLengthbBytes ) ;                        
; 245  : 			}	// TRUE (expected outcome) block, if ( lpLastPathDelimiter )

	b           |$LN18@ProgramIDF|
|$LN17@ProgramIDF|

; 246  :             else
; 247  :             {
; 248  :                 return lpchrArg0IsBlank ;

	ldr         r3,|$LN34@ProgramIDF|		; =|lpchrArg0IsBlank|
	ldr         r3,[r3]
	str         r3,[sp,#0x18]
	b           |$LN1@ProgramIDF|
|$LN18@ProgramIDF|

; 249  :             }	// FALSE (UNexpected outcome) block, if ( lpLastPathDelimiter )
; 250  :         }	// TRUE (expected outcome) block, if ( ( intPgmPtrLength = intPgmPtrLength = _tcslen ( plpszArg0 ) ) )

	b           |$LN11@ProgramIDF|
|$LN10@ProgramIDF|

; 251  :         else
; 252  :         {
; 253  :             return lpchrArg0IsBlank ;

	ldr         r3,|$LN34@ProgramIDF|		; =|lpchrArg0IsBlank|
	ldr         r3,[r3]
	str         r3,[sp,#0x18]
	b           |$LN1@ProgramIDF|
|$LN11@ProgramIDF|

; 254  :         }	// FALSE (UNexpected outcome) if ( ( intPgmPtrLength = intPgmPtrLength = _tcslen ( plpszArg0 ) ) )
; 255  :     }	// TRUE (expected outcome) block, if ( plpszArg0 )

	b           |$LN9@ProgramIDF|
|$LN8@ProgramIDF|

; 256  :     else
; 257  :     {
; 258  :         return lpchrArg0IsNull ;

	ldr         r3,|$LN33@ProgramIDF|		; =|lpchrArg0IsNull|
	ldr         r3,[r3]
	str         r3,[sp,#0x18]
|$LN9@ProgramIDF|
|$LN1@ProgramIDF|

; 259  :     }	// FALSE (UNexpected outcome) if ( plpszArg0 )
; 260  : }	// LPTSTR ProgramIDFromArgV

	ldr         r0,[sp,#0x18]
|$M31|
	add         sp,sp,#0x40
	pop         {r11}
	ldr         pc,[sp],#0xC
|$LN40@ProgramIDF|
|$M41|
	__debugbreak
|$LN32@ProgramIDF|
|$LN33@ProgramIDF|
	DCD         |lpchrArg0IsNull|
|$LN34@ProgramIDF|
	DCD         |lpchrArg0IsBlank|
|$LN35@ProgramIDF|
	DCD         |__imp_HeapAlloc|
|$LN36@ProgramIDF|
	DCD         |m_hProcHeap|
|$LN37@ProgramIDF|
	DCD         |chrExtnDlm|
|$LN38@ProgramIDF|
	DCD         |lpchrPathDlm|
|$LN39@ProgramIDF|
	DCD         |__5B3CD072_programidfromargvw@c|
|$M43|

	ENDP  ; |ProgramIDFromArgVW|

	END
