; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TTL	F:\Source_Code\Visual_Studio\Projects\NATIVE\DLL\NativeConsoleAppAids\NativeConssoleAppAids\ShowPlatformA.c
	THUMB
	.drectve
	DCB	"-defaultlib:MSVCRTD "
	DCB	"-defaultlib:OLDNAMES "

	.msvcjmc
|__2CC6E67D_corecrt_stdio_config@h| DCB 0x1
|__05476D76_corecrt_wstdio@h| DCB 0x1
|__A452D4A0_stdio@h| DCB 0x1
|__7B7A869E_ctype@h| DCB 0x1
|__457DD326_basetsd@h| DCB 0x1
|__4384A2D9_corecrt_memcpy_s@h| DCB 0x1
|__4E51A221_corecrt_wstring@h| DCB 0x1
|__2140C079_string@h| DCB 0x1
|__29C54D54_arm_neon@h| DCB 0x1
|__1887E595_winnt@h| DCB 0x1
|__9FC7C64B_processthreadsapi@h| DCB 0x1
|__FA470AEC_memoryapi@h| DCB 0x1
|__F37DAFF1_winerror@h| DCB 0x1
|__7A450CCC_winbase@h| DCB 0x1
|__86261D59_stralign@h| DCB 0x1
|__6B9C2DC0_tchar@h| DCB 0x1
|__6F88D733_showplatforma@c| DCB 0x1
	EXPORT	|__local_stdio_printf_options|
	EXPORT	|printf|
	EXPORT	|ShowPlatformA|
	EXPORT	|__JustMyCode_Default|
	IMPORT	|__imp___acrt_iob_func|
	IMPORT	|__imp___stdio_common_vfprintf|
	IMPORT	|__imp_HeapFree|
	IMPORT	|GetANSIStringPointer|
	IMPORT	|IsBufFerFromHeap|
	IMPORT	|__CheckForDebuggerJustMyCode|
	IMPORT	|m_hModuleOfThisDLL|
	IMPORT	|m_hProcHeap|
	.data
	 COMMON	|?_OptionsStorage@?1??__local_stdio_printf_options@@9@9|, 0x8
							; `__local_stdio_printf_options'::`2'::_OptionsStorage
;	COMDAT .pdata
.pdata	SEGMENT
|$pdata1$__local_stdio_printf_options| DCD imagerel |__local_stdio_printf_options|
	DCD	imagerel |$unwind2$__local_stdio_printf_options|
;	COMDAT .xdata
.xdata	SEGMENT
|$unwind2$__local_stdio_printf_options| DCD 0x32a0000d
	DCD	0xa8fb02
	DCD	0xa802ff
	DCD	0xff
;	COMDAT .pdata
.pdata	SEGMENT
|$pdata1$printf| DCD imagerel |printf|
	DCD	imagerel |$unwind2$printf|
;	COMDAT .xdata
.xdata	SEGMENT
|$unwind2$printf| DCD 0x33200030
	DCD	0x10a8fc09
	DCD	0x8809ff04
	DCD	0xff05ef10
;	COMDAT .pdata
.pdata	SEGMENT
|$pdata1$ShowPlatformA| DCD imagerel |ShowPlatformA|
	DCD	imagerel |$unwind2$ShowPlatformA|
;	COMDAT .xdata
.xdata	SEGMENT
|$unwind2$ShowPlatformA| DCD 0x33200032
	DCD	0xa8fb02
	DCD	0x8802ff02
	DCD	0xff03ef00
;	COMDAT .pdata
.pdata	SEGMENT
|$pdata1$__JustMyCode_Default| DCD imagerel |__JustMyCode_Default|
	DCD	imagerel |$unwind2$__JustMyCode_Default|
;	COMDAT .xdata
.xdata	SEGMENT
|$unwind2$__JustMyCode_Default| DCD 0x10a00005
	DCD	0xff00a8fb
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
.text$mn	SEGMENT

|__JustMyCode_Default| PROC
	push        {r11,lr}
	mov         r11,sp
|$M2|
|$M1|
	pop         {r11,pc}
|$M3|

	ENDP  ; |__JustMyCode_Default|

; Function compile flags: /Odtp
; File f:\source_code\visual_studio\projects\native\dll\nativeconsoleappaids\nativeconssoleappaids\showplatforma.c
;	COMDAT ShowPlatformA
.text$mn	SEGMENT

|ShowPlatformA| PROC

; 22   : {

	push        {r0,r1}
	push        {r11,lr}
	mov         r11,sp
	sub         sp,sp,#8
|$M10|
	ldr         r0,|$LN9@ShowPlatfo|		; =|__6F88D733_showplatforma@c|
	bl          __CheckForDebuggerJustMyCode

; 23   : 	LPTSTR lpszPlatformString = NULL;

	movs        r3,#0
	str         r3,[sp]

; 24   : 	#if defined ( PLATFORM_IS_Win32 )
; 25   : 		lpszPlatformString = GetStringPointer ( m_hModuleOfThisDLL ,
; 26   : 			                                    IDS_STRING105 ,
; 27   : 				                                FB_HIDE_LENGTH );
; 28   : 		#define PLATFORM_IS_DEFINED
; 29   : 	#endif	/* #if defined ( PLATFORM_IS_Win32 ) */
; 30   : 
; 31   : 	#if defined ( PLATFORM_IS_x64 )
; 32   : 		lpszPlatformString = GetStringPointer ( m_hModuleOfThisDLL ,
; 33   : 			                                    IDS_STRING106 ,
; 34   : 				                                FB_HIDE_LENGTH );
; 35   : 		#define PLATFORM_IS_DEFINED
; 36   : 	#endif	/* #if defined ( PLATFORM_IS_x64 ) */
; 37   : 
; 38   : 	#if defined ( PLATFORM_IS_ARM )
; 39   : 		lpszPlatformString = GetStringPointer ( m_hModuleOfThisDLL ,

	movs        r2,#0
	movs        r1,#0x6B
	ldr         r3,|$LN8@ShowPlatfo|		; =|m_hModuleOfThisDLL|
	ldr         r0,[r3]
	bl          GetANSIStringPointer
	str         r0,[sp]

; 40   : 			                                    IDS_STRING107 ,
; 41   : 				                                FB_HIDE_LENGTH );
; 42   : 		#define PLATFORM_IS_DEFINED
; 43   : 	#endif	/* #if defined ( PLATFORM_IS_ARM ) */
; 44   : 
; 45   : 	#if defined ( PLATFORM_IS_ARM64 )
; 46   : 		lpszPlatformString = GetStringPointer ( m_hModuleOfThisDLL ,
; 47   : 			                                    IDS_STRING108 ,
; 48   : 				                                FB_HIDE_LENGTH );
; 49   : 		#define PLATFORM_IS_DEFINED
; 50   : 	#endif	/* #if defined ( PLATFORM_IS_ARM64 ) */
; 51   : 
; 52   : 	#if !defined ( PLATFORM_IS_DEFINED )
; 53   : 		lpszPlatformString = GetStringPointer ( m_hModuleOfThisDLL ,
; 54   : 			                                    IDS_STRING118 ,
; 55   : 				                                FB_HIDE_LENGTH );
; 56   : 	#endif	/* #if !defined ( PLATFORM_IS_DEFINED ) */
; 57   : 
; 58   : 	_tprintf ( plpszFormatString ,

	ldr         r1,[sp]
	ldr         r0,[sp,#0x10]
	bl          printf

; 59   : 		       lpszPlatformString );
; 60   : 
; 61   : 	//	------------------------------------------------------------------------
; 62   : 	//	Although lpszPlatformString goes out of scope, its pointer remains in
; 63   : 	//	the abandoned stack frame until it is overwritten. Initializing it to an
; 64   : 	//	invalid address precludes its use in a use-after-free attack.
; 65   : 	//
; 66   : 	//	This is serious business; I have shown that abandoned stack frames can
; 67   : 	//	be used to attack a program. Though FreeBuffer_WW calls HeapFree, which
; 68   : 	//	returns +1, that address is invalid in user mode.
; 69   : 	//	------------------------------------------------------------------------
; 70   : 
; 71   : 	lpszPlatformString = FreeBuffer_WW ( lpszPlatformString );

	ldr         r2,[sp]
	movs        r1,#0
	ldr         r3,|$LN7@ShowPlatfo|		; =|m_hProcHeap|
	ldr         r0,[r3]
	ldr         r3,|$LN6@ShowPlatfo|		; =|__imp_HeapFree|
	ldr         r3,[r3]
	blx         r3
	str         r0,[sp]

; 72   : 
; 73   : 	//	------------------------------------------------------------------------
; 74   : 	//	Though discarding a buffer that was passed into a routine is usually a
; 75   : 	//	bad idea, this case warrants an exception, since the call to the routine
; 76   : 	//	that created it is expected to be nested in the call to this routine,
; 77   : 	//	leaving the buffer invisible to the calling routine, such a compromise
; 78   : 	//	is fairly safe. Nevertheless, this routine first attempts to get the
; 79   : 	//	size of the buffer from the heap manager. Unless the reported size is
; 80   : 	//	greater than -1, the attempt is abandoned.
; 81   : 	//	------------------------------------------------------------------------
; 82   : 
; 83   : 	if ( IsBufFerFromHeap ( m_hProcHeap , plpszFormatString ) )

	ldr         r1,[sp,#0x10]
	ldr         r3,|$LN7@ShowPlatfo|		; =|m_hProcHeap|
	ldr         r0,[r3]
	bl          IsBufFerFromHeap
	str         r0,[sp,#4]
	ldr         r3,[sp,#4]
	cmp         r3,#0
	beq         |$LN2@ShowPlatfo|

; 84   : 	{ 
; 85   : 		FreeBuffer_WW ( plpszFormatString );

	ldr         r2,[sp,#0x10]
	movs        r1,#0
	ldr         r3,|$LN7@ShowPlatfo|		; =|m_hProcHeap|
	ldr         r0,[r3]
	ldr         r3,|$LN6@ShowPlatfo|		; =|__imp_HeapFree|
	ldr         r3,[r3]
	blx         r3
|$LN2@ShowPlatfo|
|$M4|

; 86   : 	}	// if ( IsBufFerFromHeap ( m_hProcHeap , plpszFormatString ) )
; 87   : }	// ShowPlatfor

	add         sp,sp,#8
	pop         {r11}
	ldr         pc,[sp],#0xC
|$LN5@ShowPlatfo|
|$LN6@ShowPlatfo|
	DCD         |__imp_HeapFree|
|$LN7@ShowPlatfo|
	DCD         |m_hProcHeap|
|$LN8@ShowPlatfo|
	DCD         |m_hModuleOfThisDLL|
|$LN9@ShowPlatfo|
	DCD         |__6F88D733_showplatforma@c|
|$M11|

	ENDP  ; |ShowPlatformA|

; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT printf
.text$mn	SEGMENT

|printf| PROC

; 954  :     {

	push        {r0-r3}
	push        {r4,r11,lr}
	add         r11,sp,#4
	sub         sp,sp,#0x24
|$M10|
	ldr         r0,|$LN9@printf|			; =|__A452D4A0_stdio@h|
	bl          __CheckForDebuggerJustMyCode

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

	add         r3,sp,#0x30
	adds        r3,r3,#4
	str         r3,[sp,#0xC]

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	movs        r0,#1
	ldr         r3,|$LN8@printf|			; =|__imp___acrt_iob_func|
	ldr         r3,[r3]
	blx         r3
	str         r0,[sp,#0x14]
	ldr         r3,[sp,#0x30]
	str         r3,[sp,#0x10]

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	bl          __local_stdio_printf_options
	str         r0,[sp,#8]
	ldr         r3,[sp,#0xC]
	str         r3,[sp,#4]
	movs        r3,#0
	str         r3,[sp]
	ldr         r3,[sp,#0x10]
	ldr         r2,[sp,#0x14]
	ldr         r1,[sp,#8]
	ldr         r0,[r1]
	ldr         r1,[sp,#8]
	ldr         r1,[r1,#4]
	ldr         r4,|$LN7@printf|			; =|__imp___stdio_common_vfprintf|
	ldr         r4,[r4]
	blx         r4
	str         r0,[sp,#0x18]

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	ldr         r3,[sp,#0x18]
	str         r3,[sp,#0x1C]

; 959  :         __crt_va_end(_ArgList);

	movs        r3,#0
	str         r3,[sp,#0xC]

; 960  :         return _Result;

	ldr         r3,[sp,#0x1C]
	str         r3,[sp,#0x20]

; 961  :     }

	ldr         r0,[sp,#0x20]
|$M5|
	add         sp,sp,#0x24
	pop         {r4,r11}
	ldr         pc,[sp],#0x14
|$LN6@printf|
|$LN7@printf|
	DCD         |__imp___stdio_common_vfprintf|
|$LN8@printf|
	DCD         |__imp___acrt_iob_func|
|$LN9@printf|
	DCD         |__A452D4A0_stdio@h|
|$M11|

	ENDP  ; |printf|

; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
.text$mn	SEGMENT

|__local_stdio_printf_options| PROC

; 86   :     {

	push        {r11,lr}
	mov         r11,sp
	sub         sp,sp,#8
|$M9|
	ldr         r0,|$LN6@local_stdi|		; =|__2CC6E67D_corecrt_stdio_config@h|
	bl          __CheckForDebuggerJustMyCode

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	ldr         r3,|$LN5@local_stdi|		; =|?_OptionsStorage@?1??__local_stdio_printf_options@@9@9|
	str         r3,[sp]

; 89   :     }

	ldr         r0,[sp]
|$M3|
	add         sp,sp,#8
	pop         {r11,pc}
|$LN7@local_stdi|
|$M8|
	__debugbreak
|$LN4@local_stdi|
|$LN5@local_stdi|
	DCD         |?_OptionsStorage@?1??__local_stdio_printf_options@@9@9|
|$LN6@local_stdi|
	DCD         |__2CC6E67D_corecrt_stdio_config@h|
|$M10|

	ENDP  ; |__local_stdio_printf_options|

	END
