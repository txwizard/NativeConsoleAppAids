; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TTL	F:\Source_Code\Visual_Studio\Projects\NATIVE\DLL\NativeConsoleAppAids\NativeConssoleAppAids\GetExeNameFromWindowsA.c
	THUMB
	.drectve
	DCB	"-defaultlib:MSVCRTD "
	DCB	"-defaultlib:OLDNAMES "

	.msvcjmc
|__2CC6E67D_corecrt_stdio_config@h| DCB 0x1
|__05476D76_corecrt_wstdio@h| DCB 0x1
|__A452D4A0_stdio@h| DCB 0x1
|__7B7A869E_ctype@h| DCB 0x1
|__457DD326_basetsd@h| DCB 0x1
|__4384A2D9_corecrt_memcpy_s@h| DCB 0x1
|__4E51A221_corecrt_wstring@h| DCB 0x1
|__2140C079_string@h| DCB 0x1
|__29C54D54_arm_neon@h| DCB 0x1
|__1887E595_winnt@h| DCB 0x1
|__9FC7C64B_processthreadsapi@h| DCB 0x1
|__FA470AEC_memoryapi@h| DCB 0x1
|__F37DAFF1_winerror@h| DCB 0x1
|__7A450CCC_winbase@h| DCB 0x1
|__86261D59_stralign@h| DCB 0x1
|__6B9C2DC0_tchar@h| DCB 0x1
|__4A78DB47_getexenamefromwindowsa@c| DCB 0x1
	EXPORT	|GetExeHameFromWindowsA|
	EXPORT	|__JustMyCode_Default|
	IMPORT	|__imp_GetModuleFileNameA|
	IMPORT	|__CheckForDebuggerJustMyCode|
	.bss
|?rachrModuleNameBuffer@?1??GetExeHameFromWindowsA@@9@9| % 0x104 ; `GetExeHameFromWindowsA'::`2'::rachrModuleNameBuffer
;	COMDAT .pdata
.pdata	SEGMENT
|$pdata1$GetExeHameFromWindowsA| DCD imagerel |GetExeHameFromWindowsA|
	DCD	imagerel |$unwind2$GetExeHameFromWindowsA|
;	COMDAT .xdata
.xdata	SEGMENT
|$unwind2$GetExeHameFromWindowsA| DCD 0x32a0001c
	DCD	0xa8fb02
	DCD	0xa802ff
	DCD	0xff
;	COMDAT .pdata
.pdata	SEGMENT
|$pdata1$__JustMyCode_Default| DCD imagerel |__JustMyCode_Default|
	DCD	imagerel |$unwind2$__JustMyCode_Default|
;	COMDAT .xdata
.xdata	SEGMENT
|$unwind2$__JustMyCode_Default| DCD 0x10a00005
	DCD	0xff00a8fb
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
.text$mn	SEGMENT

|__JustMyCode_Default| PROC
	push        {r11,lr}
	mov         r11,sp
|$M2|
|$M1|
	pop         {r11,pc}
|$M3|

	ENDP  ; |__JustMyCode_Default|

; Function compile flags: /Odtp
; File f:\source_code\visual_studio\projects\native\dll\nativeconsoleappaids\nativeconssoleappaids\getexenamefromwindowsa.c
;	COMDAT GetExeHameFromWindowsA
.text$mn	SEGMENT

|GetExeHameFromWindowsA| PROC

; 18   : {

	push        {r11,lr}
	mov         r11,sp
	sub         sp,sp,#8
|$M10|
	ldr         r0,|$LN9@GetExeHame|		; =|__4A78DB47_getexenamefromwindowsa@c|
	bl          __CheckForDebuggerJustMyCode

; 19   : 	static TCHAR  rachrModuleNameBuffer [ MAX_PATH ];
; 20   : 
; 21   : 	if ( GetModuleFileName ( NULL ,												// HMODULE hModule:		A handle to the loaded module whose path is being requested. If this parameter is NULL, GetModuleFileName retrieves the path of the executable file of the current process.

	mov         r2,#0x104
	ldr         r1,|$LN7@GetExeHame|		; =|?rachrModuleNameBuffer@?1??GetExeHameFromWindowsA@@9@9|
	movs        r0,#0
	ldr         r3,|$LN8@GetExeHame|		; =|__imp_GetModuleFileNameA|
	ldr         r3,[r3]
	blx         r3
	str         r0,[sp,#4]
	ldr         r3,[sp,#4]
	cmp         r3,#0
	beq         |$LN2@GetExeHame|

; 22   : 		                     ( TCHAR * ) &rachrModuleNameBuffer ,				// LPSTR   lpFilename:	A pointer to a buffer that receives the fully qualified path of the module. If the length of the path is less than the size that the nSize parameter specifies, the function succeeds and the path is returned as a null-terminated string. If the length of the path exceeds the size that the nSize parameter specifies, the function succeeds and the string is truncated to nSize characters including the terminating null character.
; 23   : 		                     MAX_PATH ) )										// DWORD   nSize:		The size of the lpFilename buffer, in TCHARs
; 24   : 	{
; 25   : 		return ( LPTSTR ) &rachrModuleNameBuffer;

	ldr         r3,|$LN7@GetExeHame|		; =|?rachrModuleNameBuffer@?1??GetExeHameFromWindowsA@@9@9|
	str         r3,[sp]
	b           |$LN1@GetExeHame|

; 26   : 	}	// TRUE (anticipated outcome) block, if ( GetModuleFileName ( NULL , &rachrModuleNameBuffer , MAX_PATH ) )

	b           |$LN3@GetExeHame|
|$LN2@GetExeHame|

; 27   : 	else
; 28   : 	{
; 29   : 		return NULL;

	movs        r3,#0
	str         r3,[sp]
|$LN3@GetExeHame|
|$LN1@GetExeHame|

; 30   : 	}	// FALSE (unanticipated outcome) block, if ( GetModuleFileName ( NULL , &rachrModuleNameBuffer , MAX_PATH ) )
; 31   : }	// GetExeHameFromWindowsA

	ldr         r0,[sp]
|$M5|
	add         sp,sp,#8
	pop         {r11,pc}
|$LN6@GetExeHame|
|$LN7@GetExeHame|
	DCD         |?rachrModuleNameBuffer@?1??GetExeHameFromWindowsA@@9@9|
|$LN8@GetExeHame|
	DCD         |__imp_GetModuleFileNameA|
|$LN9@GetExeHame|
	DCD         |__4A78DB47_getexenamefromwindowsa@c|
|$M11|

	ENDP  ; |GetExeHameFromWindowsA|

	END
