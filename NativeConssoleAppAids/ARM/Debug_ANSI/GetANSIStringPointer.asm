; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TTL	F:\Source_Code\Visual_Studio\Projects\NATIVE\DLL\NativeConsoleAppAids\NativeConssoleAppAids\GetANSIStringPointer.c
	THUMB
	.drectve
	DCB	"-defaultlib:MSVCRTD "
	DCB	"-defaultlib:OLDNAMES "

	.msvcjmc
|__2CC6E67D_corecrt_stdio_config@h| DCB 0x1
|__05476D76_corecrt_wstdio@h| DCB 0x1
|__A452D4A0_stdio@h| DCB 0x1
|__7B7A869E_ctype@h| DCB 0x1
|__457DD326_basetsd@h| DCB 0x1
|__4384A2D9_corecrt_memcpy_s@h| DCB 0x1
|__4E51A221_corecrt_wstring@h| DCB 0x1
|__2140C079_string@h| DCB 0x1
|__29C54D54_arm_neon@h| DCB 0x1
|__1887E595_winnt@h| DCB 0x1
|__9FC7C64B_processthreadsapi@h| DCB 0x1
|__FA470AEC_memoryapi@h| DCB 0x1
|__F37DAFF1_winerror@h| DCB 0x1
|__7A450CCC_winbase@h| DCB 0x1
|__86261D59_stralign@h| DCB 0x1
|__6B9C2DC0_tchar@h| DCB 0x1
|__AF8CE1CC_getansistringpointer@c| DCB 0x1
	EXPORT	|GetANSIStringPointer|
	EXPORT	|__JustMyCode_Default|
	IMPORT	|__imp_HeapAlloc|
	IMPORT	|__imp_LoadStringA|
	IMPORT	|ReportLoadStringError|
	IMPORT	|__CheckForDebuggerJustMyCode|
	IMPORT	|m_hProcHeap|
;	COMDAT .pdata
.pdata	SEGMENT
|$pdata1$GetANSIStringPointer| DCD imagerel |GetANSIStringPointer|
	DCD	imagerel |$unwind2$GetANSIStringPointer|
;	COMDAT .xdata
.xdata	SEGMENT
|$unwind2$GetANSIStringPointer| DCD 0x33200043
	DCD	0x10a8fc03
	DCD	0x8803ff04
	DCD	0xff05ef10
;	COMDAT .pdata
.pdata	SEGMENT
|$pdata1$__JustMyCode_Default| DCD imagerel |__JustMyCode_Default|
	DCD	imagerel |$unwind2$__JustMyCode_Default|
;	COMDAT .xdata
.xdata	SEGMENT
|$unwind2$__JustMyCode_Default| DCD 0x10a00005
	DCD	0xff00a8fb
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
.text$mn	SEGMENT

|__JustMyCode_Default| PROC
	push        {r11,lr}
	mov         r11,sp
|$M2|
|$M1|
	pop         {r11,pc}
|$M3|

	ENDP  ; |__JustMyCode_Default|

; Function compile flags: /Odtp
; File f:\source_code\visual_studio\projects\native\dll\nativeconsoleappaids\nativeconssoleappaids\getansistringpointer.c
;	COMDAT GetANSIStringPointer
.text$mn	SEGMENT

|GetANSIStringPointer| PROC

; 22   : {

	push        {r0-r3}
	push        {r4,r11,lr}
	add         r11,sp,#4
	sub         sp,sp,#0xC
|$M15|
	ldr         r0,|$LN12@GetANSIStr|		; =|__AF8CE1CC_getansistringpointer@c|
	bl          __CheckForDebuggerJustMyCode

; 23   : 	LPTSTR lpTheString = AllocCString_WW ( RCDATA_MAX_LENGTH_P6C );

	mov         r2,#0x1002
	movs        r1,#8
	ldr         r3,|$LN11@GetANSIStr|		; =|m_hProcHeap|
	ldr         r0,[r3]
	ldr         r3,|$LN10@GetANSIStr|		; =|__imp_HeapAlloc|
	ldr         r3,[r3]
	blx         r3
	str         r0,[sp]

; 24   : 
; 25   : 	if ( plpuintLength )

	ldr         r3,[sp,#0x20]
	cmp         r3,#0
	beq         |$LN2@GetANSIStr|

; 26   : 	{	// The documented return value of LoadString excludes the trailing null. However, when nBufferMax = RCDATA_INPLACE_POINTER, it is included.
; 27   : 		if ( *plpuintLength = ( LoadString ( phSourceModule ,					// _in_     HMODULE   hModule

	mov         r3,#0x1001
	ldr         r2,[sp]
	ldr         r1,[sp,#0x1C]
	ldr         r0,[sp,#0x18]
	ldr         r4,|$LN9@GetANSIStr|		; =|__imp_LoadStringA|
	ldr         r4,[r4]
	blx         r4
	ldr         r3,[sp,#0x20]
	str         r0,[r3]
	ldr         r3,[sp,#0x20]
	ldr         r3,[r3]
	cmp         r3,#0
	beq         |$LN4@GetANSIStr|

; 28   :                                              puintStringID ,					// _In_     UINT      uID
; 29   : 									         lpTheString ,						// _Out_    LPTSTR    lpBuffer
; 30   : 										     RCDATA_MAX_LENGTH_P6C ) ) )		// _In_     int       nBufferMax
; 31   : 		{	// Have pointer, will return.
; 32   : 			return lpTheString ;

	ldr         r3,[sp]
	str         r3,[sp,#4]
	b           |$LN1@GetANSIStr|
|$LN4@GetANSIStr|

; 33   : 		}	// if ( ( *plpuintLength = LoadString ( phSourceModule , puintStringID , ( LPTSTR ) &lpTheString , RCDATA_INPLACE_POINTER ) ) )
; 34   : 	}	// TRUE (Return the string length through the supplied pointer) block, if ( plpuintLength )

	b           |$LN3@GetANSIStr|
|$LN2@GetANSIStr|

; 35   : 	else
; 36   : 	{
; 37   : 		if ( LoadString ( phSourceModule ,										// _in_     HMODULE   hModule

	mov         r3,#0x1001
	ldr         r2,[sp]
	ldr         r1,[sp,#0x1C]
	ldr         r0,[sp,#0x18]
	ldr         r4,|$LN9@GetANSIStr|		; =|__imp_LoadStringA|
	ldr         r4,[r4]
	blx         r4
	str         r0,[sp,#8]
	ldr         r3,[sp,#8]
	cmp         r3,#0
	beq         |$LN5@GetANSIStr|

; 38   : 			              puintStringID ,										// _In_     UINT      uID
; 39   : 			              lpTheString ,											// _Out_    LPTSTR    lpBuffer
; 40   : 			              RCDATA_MAX_LENGTH_P6C ) )								// _In_     int       nBufferMax
; 41   : 		{	// Have pointer, will return.
; 42   : 			return lpTheString ;

	ldr         r3,[sp]
	str         r3,[sp,#4]
	b           |$LN1@GetANSIStr|
|$LN5@GetANSIStr|
|$LN3@GetANSIStr|

; 43   : 		}	// if ( LoadString ( phSourceModule , puintStringID , ( LPTSTR ) &lpTheString , RCDATA_INPLACE_POINTER ) )
; 44   : 	}	// FALSE (The caller said that it doesn't need to know how long the string is.) block, if ( plpuintLength )
; 45   : 
; 46   : 	//	------------------------------------------------------------------------
; 47   : 	//	Make a report about the error retrievable through FB_GetlpErrMsgSprintf,
; 48   : 	//	then return NULL (always NULL) to signal the caller to fetch the message
; 49   : 	//	or do whatever else it wants about the load error. If the Structured
; 50   : 	//	Exception Handling flag is enabled, this call won't actually return,
; 51   : 	//	because raising the exception unwinds the stack.
; 52   : 	//	------------------------------------------------------------------------
; 53   : 
; 54   : 	ReportLoadStringError ( phSourceModule ,

	movs        r2,#0
	ldr         r1,[sp,#0x1C]
	ldr         r0,[sp,#0x18]
	bl          ReportLoadStringError

; 55   : 	                        puintStringID ,
; 56   : 	                        RCDATA_INPLACE_POINTER ) ;
; 57   : 	
; 58   : 	return NULL;

	movs        r3,#0
	str         r3,[sp,#4]
|$LN1@GetANSIStr|

; 59   : }	// GetANSIStringPointer

	ldr         r0,[sp,#4]
|$M7|
	add         sp,sp,#0xC
	pop         {r4,r11}
	ldr         pc,[sp],#0x14
|$LN13@GetANSIStr|
|$M14|
	__debugbreak
|$LN8@GetANSIStr|
|$LN9@GetANSIStr|
	DCD         |__imp_LoadStringA|
|$LN10@GetANSIStr|
	DCD         |__imp_HeapAlloc|
|$LN11@GetANSIStr|
	DCD         |m_hProcHeap|
|$LN12@GetANSIStr|
	DCD         |__AF8CE1CC_getansistringpointer@c|
|$M16|

	ENDP  ; |GetANSIStringPointer|

	END
